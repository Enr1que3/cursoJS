sitaxis,variables y palabras reservadas
tipado en js es un tipado inferido, lo que se refieres es que no se requiere especificar,
si es un int, string o float
ventajas üëç
reduce el timpo de desarrollo
desventajas üëé
que no se pueden usar la mismas varibles
de numero(int) a cadena de texto (string)

tipo en js

2 grupos primitivos y objetos

**Datos primitivos
    Number como 1,8,3,4,13,45,3152,54.51
    string como "mi nombre es ","e","73" se condideran strings todos los datos que se encuentren en "" comillas dobles o '' comillas simples
    Boolean los datos primitivos booleanos solo tienes dos opciones true o flase o 0=false y 1=true
    null asigna un espacio vacio en memoria y por lo tanto no guarda ningun valor
    undefined no esta asiganada a ninguna parte de memoria 

**Objetos
    arrays un array es lista con elementos del mismo tipo como numeros o strings 
    arr = [1,2,3,4,5] arrglo de numeros
    arr =["Brenda",Diaz,]


**variables
    hay tres formas de definir varibles
    var,let son varible son como una especie de caja en donde se almacenan valores y pueden cambiar
    const


diferencias y similitudes entre null undefined, flase y 0

var, let, const


    var varible="hola soy una varible var"//<---------l
                                             //       l
                                             //       l
    for(var i=0;i<3;i++){                    //       l
        var varible="soy la segunda variable"//-------l esta variable afecta a la varible superios apesar de estar declarada en un bloque
    }
    
    const 

**escritura din√°mica
    me lo perdi
**typeof
    typeof ayuda a ver que tipo de dato primitivo es 
    console.log(typeof(465))//Number
    console.log(typeof(true))//Boolean
    console.log(typeof("465"))string

    var number =45;
    number="soy un string"
    console.log(typeof number)//number
    console.log(typeof number)//string

**Notacion de js

// ; --> Delimitar el final de una linea
//paras buenas practicas si es recomendado
    let aad=5;

//.
    // . se utiliza en los objetos para acceder a los atributos
    //let movil.ancho 

//[]--> se usan para arrays o arreglos y listas tambine se puede utilizar par acceder a la posiciones del arr o la lista
    const arr=[1,2,3,4,5];
    console.log(arr[3]);
//() se utilizan para funciones
    function suma(p,q){
        return p + q;
        //completar la funcion
    }

//{}-->llaves para objetos, funciones y esctructura de control
const movil={
    anchura: 5,
    largo:45
};

**Listas objetos y fechas en JS
    //lista o array(arreglo)
    const lista =[1,"hola",false,null,undefined];
    const lista2= new Array(45,"hola",false,null,undefined)
    const lista3=new Array(3)
    lista3[1]="soy un string en le indice 2";
    const lista4=["soy un la lista 4 y tengo los valores de",lista,lista2,lista3]//listas dentro de una lista

    console.log(lista);
    console.log(lista2);
    console.log(lista3);
    console.log(lista4);

//objetos
    //son representaciones en datos de objetos de la vida real
    const Movil={
        altura:10,
        largo: 5,
        marca:"Samsung",
        apagado:true,
        contactos: ["enrique","Brenda","lizbeth"],
        tarjeta:{
            marca:"movistar",
            almaceamiento: 128,
        }
    };
    Movil.anio=2022
    Movil.marca="apple";

    console.log(Movil.marca);
// fechas
    //librerias de apoyo Moment.js

    const ahora=new Date()
    console.log(ahora);
    const fecha_milis=new Date(10)//utilizando los milisegundo
    console.log(fecha_milis);

    const fecha_cadena=new Date("25-marzo-2021");//utilizando cadena de texto (march 25 2022)
    console.log(fecha_cadena);

    const fecha_valores =new Date(2022,10, 25);
    console.log(fecha_valores);

    const dia=ahora.getDate();
    const mes=ahora.getMonth()+1;
    const year = ahora.getFullYear()
    console.log(dia,"-",mes,"-",year);

Bifuraciones if else y switch
    ¬øQue son las esctructuras de control?
        la esctrucutura de control es una metodologia que nos permite manjar un poquito mejor o tener mas control acerca de todo nuestro codig, es decir podemos dirijir nuestro codigo por donde nosotros queramos en funcion de ciertas condiocnes.

        Bifuraciones son esctructuras que nos permiten decirir, si por ir por un camino u el otro 
            if else
                if hace que la condicion se cumpla 
                else if va recorriendo cada opcion hasta encontrar la verdadera
                if else hace que si una condicion no se cumple, ejecute otra parte del codigo
            comparaciones
                = el simbolo = significa un asignaicon
                == solo compara el valor  (iguladad debil) 1=="1" true
                === compara valor y tipo (igualdad fuerte)  1==="1" false

            switch 
                en funcion de un valor me permite hacer varias condicones 


Bucles 
    todos tienes la misma funcion, que es la de incrementar el valor
    i=i+1;
    i +=1;
    i++
    for(inicializacion; condicion;actualizaci√≥n){

    }

controlar bucles con continue y break